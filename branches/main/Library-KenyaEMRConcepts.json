{
  "resourceType" : "Library",
  "id" : "KenyaEMRConcepts",
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>depends-on</td><td><code>http://hl7.org/fhir/Library/FHIR-ModelInfo|4.0.1</code></td></tr><tr><td>depends-on</td><td><code>http://hl7.org/fhir/Library/FHIRHelpers|4.0.1</code></td></tr><tr><td>depends-on</td><td><a href=\"Bundle-KEMRBundle.html\">FHIRCommon (version 4.0.1)</a></td></tr><tr><td>depends-on</td><td><a href=\"http://hl7.org/fhir/R4/codesystem-snomedct.html\">SNOMED CT (all versions)</a></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/5.2.0/CodeSystem-v3-loinc.html\">Logical Observation Identifiers, Names and Codes (LOINC)</a></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/5.2.0/CodeSystem-v3-rxNorm.html\">RxNorm</a></td></tr><tr><td>depends-on</td><td><a href=\"CodeSystem-CIEL.html\">CIEL</a></td></tr><tr><td>depends-on</td><td><code>https://openhie.org</code></td></tr><tr><td>depends-on</td><td><a href=\"http://hl7.org/fhir/R4/valueset-administrative-gender.html\">AdministrativeGender</a></td></tr><tr><td>depends-on</td><td><code>https://path-global-health.github.io/MERindicators/ValueSet/AgeRangesTXCURR</code></td></tr><tr><td>depends-on</td><td><code>https://path-global-health.github.io/MERindicators/ValueSet/ViralLoadTest</code></td></tr><tr><td>depends-on</td><td><a href=\"ValueSet-SyntheaHIVMedications.html\">Synthea HIV MedicationsVS</a></td></tr><tr><td>depends-on</td><td><a href=\"ValueSet-CIELHIVMedications.html\">CIELHIVMedications</a></td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class=\"language-sql\">library KenyaEMRConcepts version '0.1.0'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1'\ninclude FHIRCommon version '4.0.1' called FC\n\n// codesystems\ncodesystem &quot;SNOMED-CT&quot;: 'http://snomed.info/sct'\ncodesystem &quot;LOINC&quot;: 'http://loinc.org'\ncodesystem &quot;RxNorm&quot;: 'http://www.nlm.nih.gov/research/umls/rxnorm'\n\n// local codesystems\ncodesystem &quot;CIEL&quot;: 'https://openconceptlab.org/orgs/CIEL/sources/CIEL'\ncodesystem &quot;OpenHIE&quot;: 'https://openhie.org'\n\n// FHIR CS and VS\nvalueset &quot;HL7 Administrative Gender&quot;: 'http://hl7.org/fhir/ValueSet/administrative-gender'\n\ncode &quot;HIV Positive&quot;: '165816005' from &quot;SNOMED-CT&quot; display 'HIV Positive'\n\n// codes\n\n// The display &quot;Pregnancy (finding)&quot; is not a valid display for the code {http://snomed.info/sct}77386006\ncode &quot;Pregnancy (finding)&quot;: '77386006' from &quot;SNOMED-CT&quot; display 'Pregnancy (finding)'\ncode &quot;Pregnant&quot;: '146789000' from &quot;SNOMED-CT&quot; display 'Pregnant'\n// code &quot;Breastfeeding&quot;: '169750002' from &quot;SNOMED-CT&quot; display 'Breastfeeding'\ncode &quot;Prenatal initial visit (regime/therapy)&quot;: '424441002' from &quot;SNOMED-CT&quot; display 'Prenatal initial visit (regime/therapy)'\ncode &quot;Pregnancy status - Reported&quot;: '11449-6' from &quot;LOINC&quot; display 'Pregnancy status - Reported'\n// code &quot;Livebirth (finding)&quot;: '281050002' from &quot;SNOMED-CT&quot; display 'Livebirth (finding)'\n// code &quot;Postpartum state (finding)&quot;: '86569001' from &quot;SNOMED-CT&quot; display 'Postpartum state (finding)'\n// code &quot;Normal breast feeding (finding)&quot;: '69840006' from &quot;SNOMED-CT&quot; display 'Normal breast feeding (finding)'\n\n\n// ciel hiv/other\ncode &quot;Currently taking ARV&quot;: '160119' from &quot;CIEL&quot; display 'Currently taking ARV'\ncode &quot;Coded Answer&quot;: '1065' from &quot;CIEL&quot; display 'Yes'\ncode &quot;Method of enrollment&quot;: '160540' from &quot;CIEL&quot; display 'Method of enrollment'\ncode &quot;Outpatient department&quot;: '160542' from &quot;CIEL&quot; display 'Outpatient department'\ncode &quot;Outpatient department SNOMED&quot;: '33022008' from &quot;SNOMED-CT&quot; display 'Outpatient department'\ncode &quot;CURRENT DRUGS USED&quot;: '1193' from &quot;CIEL&quot; display 'CURRENT DRUGS USED'\ncode &quot;RETURN VISIT DATE&quot;: '5096' from &quot;CIEL&quot; display 'RETURN VISIT DATE'\n\n\n// snomed and other hiv testing, results, conditions, art\ncode &quot;Acquired immune deficiency syndrome (disorder)&quot;: '62479008' from &quot;SNOMED-CT&quot; display 'Acquired immune deficiency syndrome (disorder)'\ncode &quot;HIV Condition Positive&quot;: '86406008' from &quot;SNOMED-CT&quot; display 'HIV infection'\ncode &quot;HIV Negative&quot;: '165815009' from &quot;SNOMED-CT&quot; display 'HIV Negative'\ncode &quot;History of antiretroviral therapy (situation)&quot;: '432101000124108' from &quot;OpenHIE&quot; display 'History of antiretroviral therapy (situation)'\ncode &quot;Institutional entry point HIV treatment&quot;: '45252-4' from &quot;LOINC&quot; display 'Institutional entry point HIV treatment'\n// code &quot;New on ART&quot;: 'new-on-art' from &quot;PMTCT ART Status Codes&quot; display 'New on ART'\n// need to change to valueset\ncode &quot;Reason for discontinuation of program&quot;: '161555' from &quot;CIEL&quot; display 'Reason for discontinuation of program'\ncode &quot;Treatment end date&quot;: '164384' from &quot;CIEL&quot; display 'Treatment end date'\n\n// valuesets\nvalueset AgeRangesTXCURR: 'https://path-global-health.github.io/MERindicators/ValueSet/AgeRangesTXCURR'\n// valueset &quot;HIV Testing Services&quot;: 'https://path-global-health.github.io/MERindicators/ValueSet/HIVTestingServices' // Should use HIV tests\n// viral load tests, results\n// commenting out for now and the union\n// valueset &quot;Human Immunodeficiency Virus (HIV) Laboratory Test Codes (Ab and Ag)&quot;: 'urn:oid:2.16.840.1.113762.1.4.1056.50' // Used by CMS349\ncode &quot;HIV 1 and 2 tests - Meaningful Use set&quot;: '75622-1' from &quot;LOINC&quot; display 'HIV 1 and 2 tests - Meaningful Use set'\nvalueset &quot;Viral Load Test&quot;: 'https://path-global-health.github.io/MERindicators/ValueSet/ViralLoadTest'\n// valueset &quot;Synthea HIV Medications&quot;: 'https://path-global-health.github.io/MERindicators/ValueSet/SyntheaHIVMedications'\nvalueset &quot;ART Medications&quot;: 'https://path-global-health.github.io/MERindicators/ValueSet/SyntheaHIVMedications'\nvalueset &quot;CIELHIVMedications&quot;: 'https://path-global-health.github.io/MERindicators/ValueSet/CIELHIVMedications'\n// valueset &quot;EnrollmentMethods&quot;: \n</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 20Kb)</p><p><code>Content not shown - (</code><code>application/elm+json</code>, size = 32Kb)</p></div>"
  },
  "url" : "https://path-global-health.github.io/MERindicators/Library/KenyaEMRConcepts",
  "version" : "0.1.0",
  "name" : "KenyaEMRConcepts",
  "title" : "KenyaEMRConcepts",
  "status" : "draft",
  "experimental" : true,
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2023-10-19T20:59:19+00:00",
  "publisher" : "PATH",
  "contact" : [{
    "name" : "PATH",
    "telecom" : [{
      "system" : "url",
      "value" : "https://www.path.org"
    },
    {
      "system" : "email",
      "value" : "info@path.org"
    }]
  },
  {
    "name" : "PATH",
    "telecom" : [{
      "system" : "email",
      "value" : "info@path.org",
      "use" : "work"
    }]
  }],
  "description" : "KenyaEMRConcepts",
  "jurisdiction" : [{
    "coding" : [{
      "system" : "http://unstats.un.org/unsd/methods/m49/m49.htm",
      "code" : "001",
      "display" : "World"
    }]
  }],
  "relatedArtifact" : [{
    "type" : "depends-on",
    "resource" : "http://hl7.org/fhir/Library/FHIR-ModelInfo|4.0.1"
  },
  {
    "type" : "depends-on",
    "resource" : "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
  },
  {
    "type" : "depends-on",
    "resource" : "https://path-global-health.github.io/MERindicators/Library/FHIRCommon|4.0.1"
  },
  {
    "type" : "depends-on",
    "resource" : "http://snomed.info/sct"
  },
  {
    "type" : "depends-on",
    "resource" : "http://loinc.org"
  },
  {
    "type" : "depends-on",
    "resource" : "http://www.nlm.nih.gov/research/umls/rxnorm"
  },
  {
    "type" : "depends-on",
    "resource" : "https://openconceptlab.org/orgs/CIEL/sources/CIEL"
  },
  {
    "type" : "depends-on",
    "resource" : "https://openhie.org"
  },
  {
    "type" : "depends-on",
    "resource" : "http://hl7.org/fhir/ValueSet/administrative-gender"
  },
  {
    "type" : "depends-on",
    "resource" : "https://path-global-health.github.io/MERindicators/ValueSet/AgeRangesTXCURR"
  },
  {
    "type" : "depends-on",
    "resource" : "https://path-global-health.github.io/MERindicators/ValueSet/ViralLoadTest"
  },
  {
    "type" : "depends-on",
    "resource" : "https://path-global-health.github.io/MERindicators/ValueSet/SyntheaHIVMedications"
  },
  {
    "type" : "depends-on",
    "resource" : "https://path-global-health.github.io/MERindicators/ValueSet/CIELHIVMedications"
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : "bGlicmFyeSBLZW55YUVNUkNvbmNlcHRzIHZlcnNpb24gJzAuMS4wJwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgRkhJUkNvbW1vbiB2ZXJzaW9uICc0LjAuMScgY2FsbGVkIEZDCgovLyBjb2Rlc3lzdGVtcwpjb2Rlc3lzdGVtICJTTk9NRUQtQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcKY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycKY29kZXN5c3RlbSAiUnhOb3JtIjogJ2h0dHA6Ly93d3cubmxtLm5paC5nb3YvcmVzZWFyY2gvdW1scy9yeG5vcm0nCgovLyBsb2NhbCBjb2Rlc3lzdGVtcwpjb2Rlc3lzdGVtICJDSUVMIjogJ2h0dHBzOi8vb3BlbmNvbmNlcHRsYWIub3JnL29yZ3MvQ0lFTC9zb3VyY2VzL0NJRUwnCmNvZGVzeXN0ZW0gIk9wZW5ISUUiOiAnaHR0cHM6Ly9vcGVuaGllLm9yZycKCi8vIEZISVIgQ1MgYW5kIFZTCnZhbHVlc2V0ICJITDcgQWRtaW5pc3RyYXRpdmUgR2VuZGVyIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWRtaW5pc3RyYXRpdmUtZ2VuZGVyJwoKY29kZSAiSElWIFBvc2l0aXZlIjogJzE2NTgxNjAwNScgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdISVYgUG9zaXRpdmUnCgovLyBjb2RlcwoKLy8gVGhlIGRpc3BsYXkgIlByZWduYW5jeSAoZmluZGluZykiIGlzIG5vdCBhIHZhbGlkIGRpc3BsYXkgZm9yIHRoZSBjb2RlIHtodHRwOi8vc25vbWVkLmluZm8vc2N0fTc3Mzg2MDA2CmNvZGUgIlByZWduYW5jeSAoZmluZGluZykiOiAnNzczODYwMDYnIGZyb20gIlNOT01FRC1DVCIgZGlzcGxheSAnUHJlZ25hbmN5IChmaW5kaW5nKScKY29kZSAiUHJlZ25hbnQiOiAnMTQ2Nzg5MDAwJyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ1ByZWduYW50JwovLyBjb2RlICJCcmVhc3RmZWVkaW5nIjogJzE2OTc1MDAwMicgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdCcmVhc3RmZWVkaW5nJwpjb2RlICJQcmVuYXRhbCBpbml0aWFsIHZpc2l0IChyZWdpbWUvdGhlcmFweSkiOiAnNDI0NDQxMDAyJyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ1ByZW5hdGFsIGluaXRpYWwgdmlzaXQgKHJlZ2ltZS90aGVyYXB5KScKY29kZSAiUHJlZ25hbmN5IHN0YXR1cyAtIFJlcG9ydGVkIjogJzExNDQ5LTYnIGZyb20gIkxPSU5DIiBkaXNwbGF5ICdQcmVnbmFuY3kgc3RhdHVzIC0gUmVwb3J0ZWQnCi8vIGNvZGUgIkxpdmViaXJ0aCAoZmluZGluZykiOiAnMjgxMDUwMDAyJyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ0xpdmViaXJ0aCAoZmluZGluZyknCi8vIGNvZGUgIlBvc3RwYXJ0dW0gc3RhdGUgKGZpbmRpbmcpIjogJzg2NTY5MDAxJyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ1Bvc3RwYXJ0dW0gc3RhdGUgKGZpbmRpbmcpJwovLyBjb2RlICJOb3JtYWwgYnJlYXN0IGZlZWRpbmcgKGZpbmRpbmcpIjogJzY5ODQwMDA2JyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ05vcm1hbCBicmVhc3QgZmVlZGluZyAoZmluZGluZyknCgoKLy8gY2llbCBoaXYvb3RoZXIKY29kZSAiQ3VycmVudGx5IHRha2luZyBBUlYiOiAnMTYwMTE5JyBmcm9tICJDSUVMIiBkaXNwbGF5ICdDdXJyZW50bHkgdGFraW5nIEFSVicKY29kZSAiQ29kZWQgQW5zd2VyIjogJzEwNjUnIGZyb20gIkNJRUwiIGRpc3BsYXkgJ1llcycKY29kZSAiTWV0aG9kIG9mIGVucm9sbG1lbnQiOiAnMTYwNTQwJyBmcm9tICJDSUVMIiBkaXNwbGF5ICdNZXRob2Qgb2YgZW5yb2xsbWVudCcKY29kZSAiT3V0cGF0aWVudCBkZXBhcnRtZW50IjogJzE2MDU0MicgZnJvbSAiQ0lFTCIgZGlzcGxheSAnT3V0cGF0aWVudCBkZXBhcnRtZW50Jwpjb2RlICJPdXRwYXRpZW50IGRlcGFydG1lbnQgU05PTUVEIjogJzMzMDIyMDA4JyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ091dHBhdGllbnQgZGVwYXJ0bWVudCcKY29kZSAiQ1VSUkVOVCBEUlVHUyBVU0VEIjogJzExOTMnIGZyb20gIkNJRUwiIGRpc3BsYXkgJ0NVUlJFTlQgRFJVR1MgVVNFRCcKY29kZSAiUkVUVVJOIFZJU0lUIERBVEUiOiAnNTA5NicgZnJvbSAiQ0lFTCIgZGlzcGxheSAnUkVUVVJOIFZJU0lUIERBVEUnCgoKLy8gc25vbWVkIGFuZCBvdGhlciBoaXYgdGVzdGluZywgcmVzdWx0cywgY29uZGl0aW9ucywgYXJ0CmNvZGUgIkFjcXVpcmVkIGltbXVuZSBkZWZpY2llbmN5IHN5bmRyb21lIChkaXNvcmRlcikiOiAnNjI0NzkwMDgnIGZyb20gIlNOT01FRC1DVCIgZGlzcGxheSAnQWNxdWlyZWQgaW1tdW5lIGRlZmljaWVuY3kgc3luZHJvbWUgKGRpc29yZGVyKScKY29kZSAiSElWIENvbmRpdGlvbiBQb3NpdGl2ZSI6ICc4NjQwNjAwOCcgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdISVYgaW5mZWN0aW9uJwpjb2RlICJISVYgTmVnYXRpdmUiOiAnMTY1ODE1MDA5JyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ0hJViBOZWdhdGl2ZScKY29kZSAiSGlzdG9yeSBvZiBhbnRpcmV0cm92aXJhbCB0aGVyYXB5IChzaXR1YXRpb24pIjogJzQzMjEwMTAwMDEyNDEwOCcgZnJvbSAiT3BlbkhJRSIgZGlzcGxheSAnSGlzdG9yeSBvZiBhbnRpcmV0cm92aXJhbCB0aGVyYXB5IChzaXR1YXRpb24pJwpjb2RlICJJbnN0aXR1dGlvbmFsIGVudHJ5IHBvaW50IEhJViB0cmVhdG1lbnQiOiAnNDUyNTItNCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0luc3RpdHV0aW9uYWwgZW50cnkgcG9pbnQgSElWIHRyZWF0bWVudCcKLy8gY29kZSAiTmV3IG9uIEFSVCI6ICduZXctb24tYXJ0JyBmcm9tICJQTVRDVCBBUlQgU3RhdHVzIENvZGVzIiBkaXNwbGF5ICdOZXcgb24gQVJUJwovLyBuZWVkIHRvIGNoYW5nZSB0byB2YWx1ZXNldApjb2RlICJSZWFzb24gZm9yIGRpc2NvbnRpbnVhdGlvbiBvZiBwcm9ncmFtIjogJzE2MTU1NScgZnJvbSAiQ0lFTCIgZGlzcGxheSAnUmVhc29uIGZvciBkaXNjb250aW51YXRpb24gb2YgcHJvZ3JhbScKY29kZSAiVHJlYXRtZW50IGVuZCBkYXRlIjogJzE2NDM4NCcgZnJvbSAiQ0lFTCIgZGlzcGxheSAnVHJlYXRtZW50IGVuZCBkYXRlJwoKLy8gdmFsdWVzZXRzCnZhbHVlc2V0IEFnZVJhbmdlc1RYQ1VSUjogJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L0FnZVJhbmdlc1RYQ1VSUicKLy8gdmFsdWVzZXQgIkhJViBUZXN0aW5nIFNlcnZpY2VzIjogJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L0hJVlRlc3RpbmdTZXJ2aWNlcycgLy8gU2hvdWxkIHVzZSBISVYgdGVzdHMKLy8gdmlyYWwgbG9hZCB0ZXN0cywgcmVzdWx0cwovLyBjb21tZW50aW5nIG91dCBmb3Igbm93IGFuZCB0aGUgdW5pb24KLy8gdmFsdWVzZXQgIkh1bWFuIEltbXVub2RlZmljaWVuY3kgVmlydXMgKEhJVikgTGFib3JhdG9yeSBUZXN0IENvZGVzIChBYiBhbmQgQWcpIjogJ3VybjpvaWQ6Mi4xNi44NDAuMS4xMTM3NjIuMS40LjEwNTYuNTAnIC8vIFVzZWQgYnkgQ01TMzQ5CmNvZGUgIkhJViAxIGFuZCAyIHRlc3RzIC0gTWVhbmluZ2Z1bCBVc2Ugc2V0IjogJzc1NjIyLTEnIGZyb20gIkxPSU5DIiBkaXNwbGF5ICdISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldCcKdmFsdWVzZXQgIlZpcmFsIExvYWQgVGVzdCI6ICdodHRwczovL3BhdGgtZ2xvYmFsLWhlYWx0aC5naXRodWIuaW8vTUVSaW5kaWNhdG9ycy9WYWx1ZVNldC9WaXJhbExvYWRUZXN0JwovLyB2YWx1ZXNldCAiU3ludGhlYSBISVYgTWVkaWNhdGlvbnMiOiAnaHR0cHM6Ly9wYXRoLWdsb2JhbC1oZWFsdGguZ2l0aHViLmlvL01FUmluZGljYXRvcnMvVmFsdWVTZXQvU3ludGhlYUhJVk1lZGljYXRpb25zJwp2YWx1ZXNldCAiQVJUIE1lZGljYXRpb25zIjogJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L1N5bnRoZWFISVZNZWRpY2F0aW9ucycKdmFsdWVzZXQgIkNJRUxISVZNZWRpY2F0aW9ucyI6ICdodHRwczovL3BhdGgtZ2xvYmFsLWhlYWx0aC5naXRodWIuaW8vTUVSaW5kaWNhdG9ycy9WYWx1ZVNldC9DSUVMSElWTWVkaWNhdGlvbnMnCi8vIHZhbHVlc2V0ICJFbnJvbGxtZW50TWV0aG9kcyI6IAo="
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  },
  {
    "contentType" : "application/elm+json",
    "data" : "ewogICAibGlicmFyeSIgOiB7CiAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAidHJhbnNsYXRvck9wdGlvbnMiIDogIkVuYWJsZUFubm90YXRpb25zLEVuYWJsZUxvY2F0b3JzLEVuYWJsZVJlc3VsdFR5cGVzLERpc2FibGVMaXN0RGVtb3Rpb24sRGlzYWJsZUxpc3RQcm9tb3Rpb24iLAogICAgICAgICAidHlwZSIgOiAiQ3FsVG9FbG1JbmZvIgogICAgICB9LCB7CiAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgInMiIDogewogICAgICAgICAgICAiciIgOiAiNTMiLAogICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImxpYnJhcnkgS2VueWFFTVJDb25jZXB0cyB2ZXJzaW9uICcwLjEuMCciIF0KICAgICAgICAgICAgfSBdCiAgICAgICAgIH0KICAgICAgfSBdLAogICAgICAiaWRlbnRpZmllciIgOiB7CiAgICAgICAgICJpZCIgOiAiS2VueWFFTVJDb25jZXB0cyIsCiAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzIiwKICAgICAgICAgInZlcnNpb24iIDogIjAuMS4wIgogICAgICB9LAogICAgICAic2NoZW1hSWRlbnRpZmllciIgOiB7CiAgICAgICAgICJpZCIgOiAidXJuOmhsNy1vcmc6ZWxtIiwKICAgICAgICAgInZlcnNpb24iIDogInIxIgogICAgICB9LAogICAgICAidXNpbmdzIiA6IHsKICAgICAgICAgImRlZiIgOiBbIHsKICAgICAgICAgICAgImxvY2FsSWRlbnRpZmllciIgOiAiU3lzdGVtIiwKICAgICAgICAgICAgInVyaSIgOiAidXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIgogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIxIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjM6MS0zOjI2IiwKICAgICAgICAgICAgImxvY2FsSWRlbnRpZmllciIgOiAiRkhJUiIsCiAgICAgICAgICAgICJ1cmkiIDogImh0dHA6Ly9obDcub3JnL2ZoaXIiLAogICAgICAgICAgICAidmVyc2lvbiIgOiAiNC4wLjEiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJ1c2luZyAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIkZISVIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiB2ZXJzaW9uICIsIic0LjAuMSciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdCiAgICAgICAgIH0gXQogICAgICB9LAogICAgICAiaW5jbHVkZXMiIDogewogICAgICAgICAiZGVmIiA6IFsgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMiIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1OjEtNTozNSIsCiAgICAgICAgICAgICJsb2NhbElkZW50aWZpZXIiIDogIkZISVJIZWxwZXJzIiwKICAgICAgICAgICAgInBhdGgiIDogImh0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL0ZISVJIZWxwZXJzIiwKICAgICAgICAgICAgInZlcnNpb24iIDogIjQuMC4xIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMiIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiaW5jbHVkZSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIkZISVJIZWxwZXJzIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgdmVyc2lvbiAiLCInNC4wLjEnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIzIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjY6MS02OjQ0IiwKICAgICAgICAgICAgImxvY2FsSWRlbnRpZmllciIgOiAiRkMiLAogICAgICAgICAgICAicGF0aCIgOiAiaHR0cHM6Ly9wYXRoLWdsb2JhbC1oZWFsdGguZ2l0aHViLmlvL01FUmluZGljYXRvcnMvRkhJUkNvbW1vbiIsCiAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICI0LjAuMSIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjMiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImluY2x1ZGUgIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJGSElSQ29tbW9uIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgdmVyc2lvbiAiLCInNC4wLjEnIiwiIGNhbGxlZCAiLCJGQyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0KICAgICAgICAgfSBdCiAgICAgIH0sCiAgICAgICJjb2RlU3lzdGVtcyIgOiB7CiAgICAgICAgICJkZWYiIDogWyB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI0IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjk6MS05OjQ4IiwKICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAibmFtZSIgOiAiU05PTUVELUNUIiwKICAgICAgICAgICAgImlkIiA6ICJodHRwOi8vc25vbWVkLmluZm8vc2N0IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI0IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBjb2Rlc3lzdGVtc1xuIiwiY29kZXN5c3RlbSAiLCJcIlNOT01FRC1DVFwiIiwiOiAiLCInaHR0cDovL3Nub21lZC5pbmZvL3NjdCciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdCiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjUiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMTA6MS0xMDozOCIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlU3lzdGVtIiwKICAgICAgICAgICAgIm5hbWUiIDogIkxPSU5DIiwKICAgICAgICAgICAgImlkIiA6ICJodHRwOi8vbG9pbmMub3JnIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI1IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2Rlc3lzdGVtICIsIlwiTE9JTkNcIiIsIjogIiwiJ2h0dHA6Ly9sb2luYy5vcmcnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI2IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjExOjEtMTE6NjYiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJSeE5vcm0iLAogICAgICAgICAgICAiaWQiIDogImh0dHA6Ly93d3cubmxtLm5paC5nb3YvcmVzZWFyY2gvdW1scy9yeG5vcm0iLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjYiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImNvZGVzeXN0ZW0gIiwiXCJSeE5vcm1cIiIsIjogIiwiJ2h0dHA6Ly93d3cubmxtLm5paC5nb3YvcmVzZWFyY2gvdW1scy9yeG5vcm0nIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI3IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjE0OjEtMTQ6NzAiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDSUVMIiwKICAgICAgICAgICAgImlkIiA6ICJodHRwczovL29wZW5jb25jZXB0bGFiLm9yZy9vcmdzL0NJRUwvc291cmNlcy9DSUVMIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI3IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBsb2NhbCBjb2Rlc3lzdGVtc1xuIiwiY29kZXN5c3RlbSAiLCJcIkNJRUxcIiIsIjogIiwiJ2h0dHBzOi8vb3BlbmNvbmNlcHRsYWIub3JnL29yZ3MvQ0lFTC9zb3VyY2VzL0NJRUwnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI4IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjE1OjEtMTU6NDMiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJPcGVuSElFIiwKICAgICAgICAgICAgImlkIiA6ICJodHRwczovL29wZW5oaWUub3JnIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI4IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2Rlc3lzdGVtICIsIlwiT3BlbkhJRVwiIiwiOiAiLCInaHR0cHM6Ly9vcGVuaGllLm9yZyciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdCiAgICAgICAgIH0gXQogICAgICB9LAogICAgICAidmFsdWVTZXRzIiA6IHsKICAgICAgICAgImRlZiIgOiBbIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMTg6MS0xODo5MCIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1WYWx1ZVNldCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJITDcgQWRtaW5pc3RyYXRpdmUgR2VuZGVyIiwKICAgICAgICAgICAgImlkIiA6ICJodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FkbWluaXN0cmF0aXZlLWdlbmRlciIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiOSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiLy8gRkhJUiBDUyBhbmQgVlNcbiIsInZhbHVlc2V0ICIsIlwiSEw3IEFkbWluaXN0cmF0aXZlIEdlbmRlclwiIiwiOiAiLCInaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hZG1pbmlzdHJhdGl2ZS1nZW5kZXInIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI0OCIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1NzoxLTU3OjEwMyIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1WYWx1ZVNldCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJBZ2VSYW5nZXNUWENVUlIiLAogICAgICAgICAgICAiaWQiIDogImh0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L0FnZVJhbmdlc1RYQ1VSUiIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNDgiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIi8vIHZhbHVlc2V0c1xuIiwidmFsdWVzZXQgIiwiQWdlUmFuZ2VzVFhDVVJSIiwiOiAiLCInaHR0cHM6Ly9wYXRoLWdsb2JhbC1oZWFsdGguZ2l0aHViLmlvL01FUmluZGljYXRvcnMvVmFsdWVTZXQvQWdlUmFuZ2VzVFhDVVJSJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNTEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNjM6MS02MzoxMDMiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9VmFsdWVTZXQiLAogICAgICAgICAgICAibmFtZSIgOiAiVmlyYWwgTG9hZCBUZXN0IiwKICAgICAgICAgICAgImlkIiA6ICJodHRwczovL3BhdGgtZ2xvYmFsLWhlYWx0aC5naXRodWIuaW8vTUVSaW5kaWNhdG9ycy9WYWx1ZVNldC9WaXJhbExvYWRUZXN0IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI1MSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwidmFsdWVzZXQgIiwiXCJWaXJhbCBMb2FkIFRlc3RcIiIsIjogIiwiJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L1ZpcmFsTG9hZFRlc3QnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI1MiIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI2NToxLTY1OjExMSIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1WYWx1ZVNldCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJBUlQgTWVkaWNhdGlvbnMiLAogICAgICAgICAgICAiaWQiIDogImh0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L1N5bnRoZWFISVZNZWRpY2F0aW9ucyIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNTIiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIi8vIHZhbHVlc2V0IFwiU3ludGhlYSBISVYgTWVkaWNhdGlvbnNcIjogJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L1N5bnRoZWFISVZNZWRpY2F0aW9ucydcbiIsInZhbHVlc2V0ICIsIlwiQVJUIE1lZGljYXRpb25zXCIiLCI6ICIsIidodHRwczovL3BhdGgtZ2xvYmFsLWhlYWx0aC5naXRodWIuaW8vTUVSaW5kaWNhdG9ycy9WYWx1ZVNldC9TeW50aGVhSElWTWVkaWNhdGlvbnMnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI1MyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI2NjoxLTY2OjExMSIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1WYWx1ZVNldCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDSUVMSElWTWVkaWNhdGlvbnMiLAogICAgICAgICAgICAiaWQiIDogImh0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L0NJRUxISVZNZWRpY2F0aW9ucyIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNTMiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsInZhbHVlc2V0ICIsIlwiQ0lFTEhJVk1lZGljYXRpb25zXCIiLCI6ICIsIidodHRwczovL3BhdGgtZ2xvYmFsLWhlYWx0aC5naXRodWIuaW8vTUVSaW5kaWNhdG9ycy9WYWx1ZVNldC9DSUVMSElWTWVkaWNhdGlvbnMnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXQogICAgICAgICB9IF0KICAgICAgfSwKICAgICAgImNvZGVzIiA6IHsKICAgICAgICAgImRlZiIgOiBbIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjExIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjIwOjEtMjA6NzIiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJISVYgUG9zaXRpdmUiLAogICAgICAgICAgICAiaWQiIDogIjE2NTgxNjAwNSIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJISVYgUG9zaXRpdmUiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjExIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiSElWIFBvc2l0aXZlXCIiLCI6ICIsIicxNjU4MTYwMDUnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjEwIiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIlNOT01FRC1DVFwiIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgZGlzcGxheSAiLCInSElWIFBvc2l0aXZlJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjEwIiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjIwOjM5LTIwOjQ5IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiU05PTUVELUNUIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjEzIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjI1OjEtMjU6ODUiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJQcmVnbmFuY3kgKGZpbmRpbmcpIiwKICAgICAgICAgICAgImlkIiA6ICI3NzM4NjAwNiIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJQcmVnbmFuY3kgKGZpbmRpbmcpIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIxMyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiLy8gY29kZXNcblxuLy8gVGhlIGRpc3BsYXkgXCJQcmVnbmFuY3kgKGZpbmRpbmcpXCIgaXMgbm90IGEgdmFsaWQgZGlzcGxheSBmb3IgdGhlIGNvZGUge2h0dHA6Ly9zbm9tZWQuaW5mby9zY3R9NzczODYwMDZcbiIsImNvZGUgIiwiXCJQcmVnbmFuY3kgKGZpbmRpbmcpXCIiLCI6ICIsIic3NzM4NjAwNiciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMTIiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiU05PTUVELUNUXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidQcmVnbmFuY3kgKGZpbmRpbmcpJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjEyIiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjI1OjQ1LTI1OjU1IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiU05PTUVELUNUIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjE1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjI2OjEtMjY6NjQiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJQcmVnbmFudCIsCiAgICAgICAgICAgICJpZCIgOiAiMTQ2Nzg5MDAwIiwKICAgICAgICAgICAgImRpc3BsYXkiIDogIlByZWduYW50IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIxNSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIlByZWduYW50XCIiLCI6ICIsIicxNDY3ODkwMDAnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjE0IiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIlNOT01FRC1DVFwiIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgZGlzcGxheSAiLCInUHJlZ25hbnQnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMTQiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiMjY6MzUtMjY6NDUiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJTTk9NRUQtQ1QiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMTciLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMjg6MS0yODoxMjYiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJQcmVuYXRhbCBpbml0aWFsIHZpc2l0IChyZWdpbWUvdGhlcmFweSkiLAogICAgICAgICAgICAiaWQiIDogIjQyNDQ0MTAwMiIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJQcmVuYXRhbCBpbml0aWFsIHZpc2l0IChyZWdpbWUvdGhlcmFweSkiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjE3IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBjb2RlIFwiQnJlYXN0ZmVlZGluZ1wiOiAnMTY5NzUwMDAyJyBmcm9tIFwiU05PTUVELUNUXCIgZGlzcGxheSAnQnJlYXN0ZmVlZGluZydcbiIsImNvZGUgIiwiXCJQcmVuYXRhbCBpbml0aWFsIHZpc2l0IChyZWdpbWUvdGhlcmFweSlcIiIsIjogIiwiJzQyNDQ0MTAwMiciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMTYiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiU05PTUVELUNUXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidQcmVuYXRhbCBpbml0aWFsIHZpc2l0IChyZWdpbWUvdGhlcmFweSknIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMTYiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiMjg6NjYtMjg6NzYiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJTTk9NRUQtQ1QiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMTkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMjk6MS0yOTo5NiIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlIiwKICAgICAgICAgICAgIm5hbWUiIDogIlByZWduYW5jeSBzdGF0dXMgLSBSZXBvcnRlZCIsCiAgICAgICAgICAgICJpZCIgOiAiMTE0NDktNiIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJQcmVnbmFuY3kgc3RhdHVzIC0gUmVwb3J0ZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjE5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiUHJlZ25hbmN5IHN0YXR1cyAtIFJlcG9ydGVkXCIiLCI6ICIsIicxMTQ0OS02JyIsIiBmcm9tICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiXCJMT0lOQ1wiIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgZGlzcGxheSAiLCInUHJlZ25hbmN5IHN0YXR1cyAtIFJlcG9ydGVkJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjE4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjI5OjUyLTI5OjU4IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiTE9JTkMiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMjEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMzY6MS0zNjo4MCIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlIiwKICAgICAgICAgICAgIm5hbWUiIDogIkN1cnJlbnRseSB0YWtpbmcgQVJWIiwKICAgICAgICAgICAgImlkIiA6ICIxNjAxMTkiLAogICAgICAgICAgICAiZGlzcGxheSIgOiAiQ3VycmVudGx5IHRha2luZyBBUlYiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjIxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBjb2RlIFwiTGl2ZWJpcnRoIChmaW5kaW5nKVwiOiAnMjgxMDUwMDAyJyBmcm9tIFwiU05PTUVELUNUXCIgZGlzcGxheSAnTGl2ZWJpcnRoIChmaW5kaW5nKSdcbi8vIGNvZGUgXCJQb3N0cGFydHVtIHN0YXRlIChmaW5kaW5nKVwiOiAnODY1NjkwMDEnIGZyb20gXCJTTk9NRUQtQ1RcIiBkaXNwbGF5ICdQb3N0cGFydHVtIHN0YXRlIChmaW5kaW5nKSdcbi8vIGNvZGUgXCJOb3JtYWwgYnJlYXN0IGZlZWRpbmcgKGZpbmRpbmcpXCI6ICc2OTg0MDAwNicgZnJvbSBcIlNOT01FRC1DVFwiIGRpc3BsYXkgJ05vcm1hbCBicmVhc3QgZmVlZGluZyAoZmluZGluZyknXG5cblxuLy8gY2llbCBoaXYvb3RoZXJcbiIsImNvZGUgIiwiXCJDdXJyZW50bHkgdGFraW5nIEFSVlwiIiwiOiAiLCInMTYwMTE5JyIsIiBmcm9tICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIyMCIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiXCJDSUVMXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidDdXJyZW50bHkgdGFraW5nIEFSViciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiY29kZVN5c3RlbSIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIyMCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIzNjo0NC0zNjo0OSIsCiAgICAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlU3lzdGVtIiwKICAgICAgICAgICAgICAgIm5hbWUiIDogIkNJRUwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMjMiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMzc6MS0zNzo1MyIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlIiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvZGVkIEFuc3dlciIsCiAgICAgICAgICAgICJpZCIgOiAiMTA2NSIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJZZXMiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjIzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiQ29kZWQgQW5zd2VyXCIiLCI6ICIsIicxMDY1JyIsIiBmcm9tICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIyMiIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiXCJDSUVMXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidZZXMnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMjIiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiMzc6MzQtMzc6MzkiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJDSUVMIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjI1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjM4OjEtMzg6ODAiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJNZXRob2Qgb2YgZW5yb2xsbWVudCIsCiAgICAgICAgICAgICJpZCIgOiAiMTYwNTQwIiwKICAgICAgICAgICAgImRpc3BsYXkiIDogIk1ldGhvZCBvZiBlbnJvbGxtZW50IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIyNSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIk1ldGhvZCBvZiBlbnJvbGxtZW50XCIiLCI6ICIsIicxNjA1NDAnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjI0IiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIkNJRUxcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ01ldGhvZCBvZiBlbnJvbGxtZW50JyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjI0IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjM4OjQ0LTM4OjQ5IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiQ0lFTCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIyNyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICIzOToxLTM5OjgyIiwKICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGUiLAogICAgICAgICAgICAibmFtZSIgOiAiT3V0cGF0aWVudCBkZXBhcnRtZW50IiwKICAgICAgICAgICAgImlkIiA6ICIxNjA1NDIiLAogICAgICAgICAgICAiZGlzcGxheSIgOiAiT3V0cGF0aWVudCBkZXBhcnRtZW50IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIyNyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIk91dHBhdGllbnQgZGVwYXJ0bWVudFwiIiwiOiAiLCInMTYwNTQyJyIsIiBmcm9tICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIyNiIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiXCJDSUVMXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidPdXRwYXRpZW50IGRlcGFydG1lbnQnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMjYiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiMzk6NDUtMzk6NTAiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJDSUVMIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjI5IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQwOjEtNDA6OTYiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJPdXRwYXRpZW50IGRlcGFydG1lbnQgU05PTUVEIiwKICAgICAgICAgICAgImlkIiA6ICIzMzAyMjAwOCIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJPdXRwYXRpZW50IGRlcGFydG1lbnQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjI5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiT3V0cGF0aWVudCBkZXBhcnRtZW50IFNOT01FRFwiIiwiOiAiLCInMzMwMjIwMDgnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjI4IiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIlNOT01FRC1DVFwiIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgZGlzcGxheSAiLCInT3V0cGF0aWVudCBkZXBhcnRtZW50JyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjI4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjQwOjU0LTQwOjY0IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiU05PTUVELUNUIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjMxIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQxOjEtNDE6NzQiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDVVJSRU5UIERSVUdTIFVTRUQiLAogICAgICAgICAgICAiaWQiIDogIjExOTMiLAogICAgICAgICAgICAiZGlzcGxheSIgOiAiQ1VSUkVOVCBEUlVHUyBVU0VEIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIzMSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIkNVUlJFTlQgRFJVR1MgVVNFRFwiIiwiOiAiLCInMTE5MyciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMzAiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiQ0lFTFwiIiBdCiAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIgZGlzcGxheSAiLCInQ1VSUkVOVCBEUlVHUyBVU0VEJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjMwIiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjQxOjQwLTQxOjQ1IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiQ0lFTCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIzMyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0MjoxLTQyOjcyIiwKICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGUiLAogICAgICAgICAgICAibmFtZSIgOiAiUkVUVVJOIFZJU0lUIERBVEUiLAogICAgICAgICAgICAiaWQiIDogIjUwOTYiLAogICAgICAgICAgICAiZGlzcGxheSIgOiAiUkVUVVJOIFZJU0lUIERBVEUiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjMzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiUkVUVVJOIFZJU0lUIERBVEVcIiIsIjogIiwiJzUwOTYnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjMyIiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIkNJRUxcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ1JFVFVSTiBWSVNJVCBEQVRFJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjMyIiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjQyOjM5LTQyOjQ0IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiQ0lFTCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIzNSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0NjoxLTQ2OjEzOSIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlIiwKICAgICAgICAgICAgIm5hbWUiIDogIkFjcXVpcmVkIGltbXVuZSBkZWZpY2llbmN5IHN5bmRyb21lIChkaXNvcmRlcikiLAogICAgICAgICAgICAiaWQiIDogIjYyNDc5MDA4IiwKICAgICAgICAgICAgImRpc3BsYXkiIDogIkFjcXVpcmVkIGltbXVuZSBkZWZpY2llbmN5IHN5bmRyb21lIChkaXNvcmRlcikiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjM1IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBzbm9tZWQgYW5kIG90aGVyIGhpdiB0ZXN0aW5nLCByZXN1bHRzLCBjb25kaXRpb25zLCBhcnRcbiIsImNvZGUgIiwiXCJBY3F1aXJlZCBpbW11bmUgZGVmaWNpZW5jeSBzeW5kcm9tZSAoZGlzb3JkZXIpXCIiLCI6ICIsIic2MjQ3OTAwOCciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMzQiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiU05PTUVELUNUXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidBY3F1aXJlZCBpbW11bmUgZGVmaWNpZW5jeSBzeW5kcm9tZSAoZGlzb3JkZXIpJyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjM0IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjQ2OjcyLTQ2OjgyIiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiU05PTUVELUNUIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjM3IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQ3OjEtNDc6ODIiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJISVYgQ29uZGl0aW9uIFBvc2l0aXZlIiwKICAgICAgICAgICAgImlkIiA6ICI4NjQwNjAwOCIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJISVYgaW5mZWN0aW9uIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIzNyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIkhJViBDb25kaXRpb24gUG9zaXRpdmVcIiIsIjogIiwiJzg2NDA2MDA4JyIsIiBmcm9tICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIzNiIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiXCJTTk9NRUQtQ1RcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ0hJViBpbmZlY3Rpb24nIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMzYiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDc6NDgtNDc6NTgiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJTTk9NRUQtQ1QiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMzkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDg6MS00ODo3MiIsCiAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlIiwKICAgICAgICAgICAgIm5hbWUiIDogIkhJViBOZWdhdGl2ZSIsCiAgICAgICAgICAgICJpZCIgOiAiMTY1ODE1MDA5IiwKICAgICAgICAgICAgImRpc3BsYXkiIDogIkhJViBOZWdhdGl2ZSIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMzkiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImNvZGUgIiwiXCJISVYgTmVnYXRpdmVcIiIsIjogIiwiJzE2NTgxNTAwOSciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMzgiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiU05PTUVELUNUXCIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiBkaXNwbGF5ICIsIidISVYgTmVnYXRpdmUnIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMzgiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDg6MzktNDg6NDkiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJTTk9NRUQtQ1QiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNDEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDk6MS00OToxNDIiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJIaXN0b3J5IG9mIGFudGlyZXRyb3ZpcmFsIHRoZXJhcHkgKHNpdHVhdGlvbikiLAogICAgICAgICAgICAiaWQiIDogIjQzMjEwMTAwMDEyNDEwOCIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJIaXN0b3J5IG9mIGFudGlyZXRyb3ZpcmFsIHRoZXJhcHkgKHNpdHVhdGlvbikiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjQxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiSGlzdG9yeSBvZiBhbnRpcmV0cm92aXJhbCB0aGVyYXB5IChzaXR1YXRpb24pXCIiLCI6ICIsIic0MzIxMDEwMDAxMjQxMDgnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjQwIiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIk9wZW5ISUVcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ0hpc3Rvcnkgb2YgYW50aXJldHJvdmlyYWwgdGhlcmFweSAoc2l0dWF0aW9uKSciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiY29kZVN5c3RlbSIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI0MCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0OTo3OC00OTo4NiIsCiAgICAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlU3lzdGVtIiwKICAgICAgICAgICAgICAgIm5hbWUiIDogIk9wZW5ISUUiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNDMiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNTA6MS01MDoxMjAiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJJbnN0aXR1dGlvbmFsIGVudHJ5IHBvaW50IEhJViB0cmVhdG1lbnQiLAogICAgICAgICAgICAiaWQiIDogIjQ1MjUyLTQiLAogICAgICAgICAgICAiZGlzcGxheSIgOiAiSW5zdGl0dXRpb25hbCBlbnRyeSBwb2ludCBISVYgdHJlYXRtZW50IiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI0MyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiY29kZSAiLCJcIkluc3RpdHV0aW9uYWwgZW50cnkgcG9pbnQgSElWIHRyZWF0bWVudFwiIiwiOiAiLCInNDUyNTItNCciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNDIiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiTE9JTkNcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ0luc3RpdHV0aW9uYWwgZW50cnkgcG9pbnQgSElWIHRyZWF0bWVudCciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiY29kZVN5c3RlbSIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI0MiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1MDo2NC01MDo3MCIsCiAgICAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlU3lzdGVtIiwKICAgICAgICAgICAgICAgIm5hbWUiIDogIkxPSU5DIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjQ1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjUzOjEtNTM6MTE0IiwKICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGUiLAogICAgICAgICAgICAibmFtZSIgOiAiUmVhc29uIGZvciBkaXNjb250aW51YXRpb24gb2YgcHJvZ3JhbSIsCiAgICAgICAgICAgICJpZCIgOiAiMTYxNTU1IiwKICAgICAgICAgICAgImRpc3BsYXkiIDogIlJlYXNvbiBmb3IgZGlzY29udGludWF0aW9uIG9mIHByb2dyYW0iLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjQ1IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvLyBjb2RlIFwiTmV3IG9uIEFSVFwiOiAnbmV3LW9uLWFydCcgZnJvbSBcIlBNVENUIEFSVCBTdGF0dXMgQ29kZXNcIiBkaXNwbGF5ICdOZXcgb24gQVJUJ1xuLy8gbmVlZCB0byBjaGFuZ2UgdG8gdmFsdWVzZXRcbiIsImNvZGUgIiwiXCJSZWFzb24gZm9yIGRpc2NvbnRpbnVhdGlvbiBvZiBwcm9ncmFtXCIiLCI6ICIsIicxNjE1NTUnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjQ0IiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIkNJRUxcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ1JlYXNvbiBmb3IgZGlzY29udGludWF0aW9uIG9mIHByb2dyYW0nIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImNvZGVTeXN0ZW0iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNDQiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNTM6NjEtNTM6NjYiLAogICAgICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZVN5c3RlbSIsCiAgICAgICAgICAgICAgICJuYW1lIiA6ICJDSUVMIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjQ3IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjU0OjEtNTQ6NzYiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJUcmVhdG1lbnQgZW5kIGRhdGUiLAogICAgICAgICAgICAiaWQiIDogIjE2NDM4NCIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJUcmVhdG1lbnQgZW5kIGRhdGUiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjQ3IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJjb2RlICIsIlwiVHJlYXRtZW50IGVuZCBkYXRlXCIiLCI6ICIsIicxNjQzODQnIiwiIGZyb20gIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjQ2IiwKICAgICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICJcIkNJRUxcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ1RyZWF0bWVudCBlbmQgZGF0ZSciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiY29kZVN5c3RlbSIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI0NiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1NDo0Mi01NDo0NyIsCiAgICAgICAgICAgICAgICJyZXN1bHRUeXBlTmFtZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Db2RlU3lzdGVtIiwKICAgICAgICAgICAgICAgIm5hbWUiIDogIkNJRUwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNTAiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNjI6MS02MjoxMTgiLAogICAgICAgICAgICAicmVzdWx0VHlwZU5hbWUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Q29kZSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldCIsCiAgICAgICAgICAgICJpZCIgOiAiNzU2MjItMSIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNTAiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIi8vIHZhbHVlc2V0IFwiSElWIFRlc3RpbmcgU2VydmljZXNcIjogJ2h0dHBzOi8vcGF0aC1nbG9iYWwtaGVhbHRoLmdpdGh1Yi5pby9NRVJpbmRpY2F0b3JzL1ZhbHVlU2V0L0hJVlRlc3RpbmdTZXJ2aWNlcycgLy8gU2hvdWxkIHVzZSBISVYgdGVzdHNcbi8vIHZpcmFsIGxvYWQgdGVzdHMsIHJlc3VsdHNcbi8vIGNvbW1lbnRpbmcgb3V0IGZvciBub3cgYW5kIHRoZSB1bmlvblxuLy8gdmFsdWVzZXQgXCJIdW1hbiBJbW11bm9kZWZpY2llbmN5IFZpcnVzIChISVYpIExhYm9yYXRvcnkgVGVzdCBDb2RlcyAoQWIgYW5kIEFnKVwiOiAndXJuOm9pZDoyLjE2Ljg0MC4xLjExMzc2Mi4xLjQuMTA1Ni41MCcgLy8gVXNlZCBieSBDTVMzNDlcbiIsImNvZGUgIiwiXCJISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldFwiIiwiOiAiLCInNzU2MjItMSciLCIgZnJvbSAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNDkiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIlwiTE9JTkNcIiIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIGRpc3BsYXkgIiwiJ0hJViAxIGFuZCAyIHRlc3RzIC0gTWVhbmluZ2Z1bCBVc2Ugc2V0JyIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJjb2RlU3lzdGVtIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjQ5IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjYyOjYzLTYyOjY5IiwKICAgICAgICAgICAgICAgInJlc3VsdFR5cGVOYW1lIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUNvZGVTeXN0ZW0iLAogICAgICAgICAgICAgICAibmFtZSIgOiAiTE9JTkMiCiAgICAgICAgICAgIH0KICAgICAgICAgfSBdCiAgICAgIH0KICAgfQp9"
  }]
}